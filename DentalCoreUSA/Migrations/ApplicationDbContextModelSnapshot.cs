// <auto-generated />
using DentalCoreUSA.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Microsoft.EntityFrameworkCore.ValueGeneration;
using System;

namespace DentalCoreUSA.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DentalCoreUSA.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<string>("dob");

                    b.Property<string>("firstName");

                    b.Property<int>("gender");

                    b.Property<string>("lastName");

                    b.Property<string>("middleName");

                    b.Property<int>("ssn");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("ApplicationUser");
                });

            modelBuilder.Entity("DentalCoreUSA.Data.Schedule.Appointment", b =>
                {
                    b.Property<int>("appointmentId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("beginAppointment");

                    b.Property<DateTime>("endAppointment");

                    b.Property<string>("notes");

                    b.Property<int>("patientId");

                    b.Property<bool>("status");

                    b.Property<int?>("visitStatusId");

                    b.Property<int>("visitStatusfieldOptionId");

                    b.Property<int?>("visitTypeId");

                    b.Property<int>("visitTypefieldOptionId");

                    b.HasKey("appointmentId");

                    b.HasIndex("patientId");

                    b.HasIndex("visitStatusId");

                    b.HasIndex("visitTypeId");

                    b.ToTable("Appointment");
                });

            modelBuilder.Entity("DentalCoreUSA.Data.Schedule.Patient", b =>
                {
                    b.Property<int>("patientId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("birthdate");

                    b.Property<string>("email")
                        .IsRequired();

                    b.Property<string>("gender")
                        .IsRequired();

                    b.Property<string>("lastname")
                        .IsRequired();

                    b.Property<string>("middle_name");

                    b.Property<int>("mrn");

                    b.Property<string>("name")
                        .IsRequired();

                    b.Property<string>("primaryphone")
                        .IsRequired();

                    b.HasKey("patientId");

                    b.ToTable("Patient");
                });

            modelBuilder.Entity("DentalCoreUSA.Data.Schedule.PatientDemographic", b =>
                {
                    b.Property<int>("patientDemographicId")
                        .ValueGeneratedOnAdd();

                    b.HasKey("patientDemographicId");

                    b.ToTable("PatientDemographic");
                });

            modelBuilder.Entity("DentalCoreUSA.Data.Schedule.VisitStatus", b =>
                {
                    b.Property<int>("visitStatusId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("active");

                    b.Property<string>("color");

                    b.Property<string>("description");

                    b.Property<string>("name");

                    b.Property<int>("order");

                    b.Property<string>("status");

                    b.HasKey("visitStatusId");

                    b.ToTable("VisitStatus");
                });

            modelBuilder.Entity("DentalCoreUSA.Data.Schedule.VisitType", b =>
                {
                    b.Property<int>("visitTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("active");

                    b.Property<string>("color");

                    b.Property<string>("description");

                    b.Property<string>("name");

                    b.Property<int>("order");

                    b.Property<string>("type");

                    b.HasKey("visitTypeId");

                    b.ToTable("VisitType");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("DentalCoreUSA.Data.ProvidersUser", b =>
                {
                    b.HasBaseType("DentalCoreUSA.Data.ApplicationUser");

                    b.Property<DateTime>("deaActive");

                    b.Property<string>("deaNumber");

                    b.Property<DateTime>("deaTerm");

                    b.Property<string>("degree");

                    b.Property<string>("specialty");

                    b.ToTable("ProvidersUser");

                    b.HasDiscriminator().HasValue("ProvidersUser");
                });

            modelBuilder.Entity("DentalCoreUSA.Data.StaffUser", b =>
                {
                    b.HasBaseType("DentalCoreUSA.Data.ApplicationUser");


                    b.ToTable("StaffUser");

                    b.HasDiscriminator().HasValue("StaffUser");
                });

            modelBuilder.Entity("DentalCoreUSA.Data.Schedule.Appointment", b =>
                {
                    b.HasOne("DentalCoreUSA.Data.Schedule.Patient", "patient")
                        .WithMany("appointments")
                        .HasForeignKey("patientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DentalCoreUSA.Data.Schedule.VisitStatus", "visitStatus")
                        .WithMany("appointments")
                        .HasForeignKey("visitStatusId");

                    b.HasOne("DentalCoreUSA.Data.Schedule.VisitType", "visitType")
                        .WithMany("appointments")
                        .HasForeignKey("visitTypeId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DentalCoreUSA.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DentalCoreUSA.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DentalCoreUSA.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DentalCoreUSA.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
